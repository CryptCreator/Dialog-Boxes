<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="E{aDFvHcU;Uu+L*e-B?c">MAX_FRAME_UNIT</variable><variable id="Ke$#zEOMOd8S=cl~r2u%">dem</variable><variable id="?z]$^i2E-W.{|:@uAcOV">pressed</variable></variables><comment id="@[#BH~ao?{Nfk1H_I?p*" data="0" x="0" y="0" h="120" w="480">let dialogs = new game.BaseDialog(screen.width, screen.height);
let tester = new Test(screen.width, screen.height);</comment><comment id="N)cD`F;_2^|hz-fSUq=f" data="1" x="0" y="0" h="160" w="260">game.onUpdate(function() {
nineSlice.drawNineSlice();
console.log("Hello");
})</comment><comment id="m51?/Sth|NXT;*OaO(z?" data="2" x="0" y="0" h="360" w="480">scene.setBackgroundColor(8)
game.setDialogFrame(img`
..ccccc....333.....333...ccccc...
.c33b33c..39993...39993.c33b33c..
c3b33bb3c39999933399999c3bb33b3c.
c33b33b3c99111999991119c3b33b33c.
cb33b33bc91999199919991cb33b33bc.
c3b33bbbcb999991119999bcbbb33b3c.
c3bb3bbd1b111119991111b1dbb3bb3c.
.c33bbd1b11111111111111b1dbb33c..
..cccc1b1111111111111111b1cccc...
.3991bb111111111111111111bb993...
3991991111111111111111111191993..
39919911111111111111111111991993.
39919911111111111111111111991993.
.3991911111111111111111111991993.
..39919111111111111111111191993..
..3991911111111111111111191993...
..3991911111111111111111191993...
.39919111111111111111111191993...
3991991111111111111111111191993..
39919911111111111111111111991993.
39919911111111111111111111991993.
.3991911111111111111111111991993.
..699bb111111111111111111bb1993..
..cccc1b1111111111111111b1cccc...
.c33bbd1b11111111111111b1dbb33c..
c3bb3bbd1b111199911111b1dbb3bb3c.
c3b33bbbcb999911199999bcbbb33b3c.
cb33b33bc19991999199919cb33b33bc.
c33b33b3c91119999911199c3b33b33c.
c3b33bb3c99999333999993c3bb33b3c.
.c33b33c.39993...39993..c33b33c..
..ccccc...333.....333....ccccc...
.................................
`)
//game.showDialog("Hello", "Yes Sir?", "something");
game.showLongText("Hello", DialogLayout.Bottom)
//game.BaseDialog.resize();</comment><block type="pxt-on-start" id="F]3W^MjBP6h8(W^P,V%:" x="10" y="10"><statement name="HANDLER"><block type="gamesetbackgroundcolor" id="7pgc[M!,St7:bNiz(|.)"><comment pinned="false" h="80" w="160">let test = sprites.create(assets.image`myImage`);
test.image.fillRect(0, 0, test.width / 3, test.height / 3, 0);
test.image.drawPartial()</comment><data>2</data><value name="color"><shadow type="colorindexpicker" id=",IL5_UMs9{ntUR3p+peu"><field name="index">0</field></shadow></value><next><block type="variables_set" id="Q]SZw=P}p}^EVwBEOq$R"><field name="VAR" id="E{aDFvHcU;Uu+L*e-B?c">MAX_FRAME_UNIT</field><comment pinned="false" h="80" w="160">let sprit = sprites.create(assets.image`myImage`);</comment><value name="VALUE"><shadow type="math_number" id="~I!myHP(`R,Q^dolKQoD"><field name="NUM">12</field></shadow></value><next><block type="typescript_statement" id="qC#;LHXy2CMbgl*xwXVa" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class NineSliceBox {" line1="    image: Image;" line2="    frame: Image;" line3="    cursor: Image;" line4="    nineSlice: Image[];" line5="" line6="    x: number;" line7="    y: number;" line8="    unit: number;" line9="    rows: number;" line10="    columns: number;" line11="" line12="    innerLeft: number;" line13="    innerTop: number;" line14="    cursorCount: number;" line15="" line16="    font: image.Font;" line17="    textColor: number;" line18="" line19="    constructor(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, textColour?: number, cursor?: Image) {" line20="        this.cursorCount = 0;" line21="        this.resize(x, y, width, height, frame, font, textColour, cursor);" line22="    }" line23="" line24="    resize(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, textColour?: number, cursor?: Image) {" line25="        this.x = x; this.y = y;" line26="        this.frame = frame ||assets.image`defaultFrame`;" line27="        this.unit = Math.floor(this.frame.width / 3);" line28="        this.columns = Math.floor(width / this.unit);" line29="        this.rows = Math.floor(height / this.unit);" line30="        this.innerLeft = (width - (this.columns * this.unit)) &gt;&gt; 1;" line31="        this.innerTop = (height - (this.rows * this.unit)) &gt;&gt; 1;" line32="        this.image = image.create(this.x + width, this.y + height);" line33="        this.font = font || image.font8;" line34="        this.cursor = cursor ||assets.image`cursor`;" line35="        this.textColor = textColour == undefined ? textColour = 15 : textColour;" line36="" line37="        this.calculateSlices();" line38="        this.draw();" line39="    }" line40="" line41="    update() {" line42="        this.draw();" line43="        this.drawCursorRow();" line44="    }" line45="" line46="    protected calculateSlices() {" line47="        this.nineSlice = [];" line48="        for (let i = 0; i &lt; 9; i++) {" line49="            this.nineSlice.push(image.create(this.unit, this.unit))" line50="            this.drawPartial(this.nineSlice[i], 0, 0, i, this.unit, this.unit);" line51="        }" line52="    }" line53="" line54="    protected draw() {" line55="        let edgeX = this.image.width - this.unit;" line56="        let edgeY = this.image.height - this.unit;" line57="" line58="        for (let c = 2; c &lt; this.columns; c++) {" line59="            this.image.drawTransparentImage(this.nineSlice[1], this.x + ((c - 1) * this.unit), this.y);" line60="            this.image.drawTransparentImage(this.nineSlice[7], this.x + ((c - 1) * this.unit),  edgeY);" line61="        }" line62="        this.drawPartial(this.image, this.x + ((this.columns - 1) * this.unit)," line63="            this.y, 1, this.image.width - ((this.columns * this.unit) + this.x), this.unit);" line64="        this.drawPartial(this.image, this.x + ((this.columns - 1) * this.unit)," line65="            edgeY, 7, this.image.width - ((this.columns * this.unit) + this.x), this.unit);" line66="" line67="        for (let r = 2; r &lt; this.rows; r++) {" line68="            this.image.drawTransparentImage(this.nineSlice[3], this.x, this.y + ((r - 1) * this.unit));" line69="            this.image.drawTransparentImage(this.nineSlice[5], edgeX, this.y + ((r - 1) * this.unit));" line70="        }" line71="        this.drawPartial(this.image, this.x, this.y + ((this.rows - 1) * this.unit)," line72="            3, this.unit, this.image.height - ((this.rows * this.unit) + this.y));" line73="        this.drawPartial(this.image, edgeX, this.y + ((this.rows - 1) * this.unit)," line74="            5, this.unit, this.image.height - ((this.rows * this.unit) + this.y));" line75="" line76="        //Edges" line77="        this.image.drawTransparentImage(this.nineSlice[0], this.x, this.y);" line78="        this.image.drawTransparentImage(this.nineSlice[2], edgeX, this.y);" line79="        this.image.drawTransparentImage(this.nineSlice[6], this.x, edgeY);" line80="        this.image.drawTransparentImage(this.nineSlice[8], edgeX, edgeY);" line81="        " line82="        this.image.fillRect(" line83="            this.unit + this.x, this.unit + this.y, edgeX - this.x -this.unit, edgeY - this.y - this.unit," line84="            this.frame.getPixel(this.unit, this.unit));" line85="    }" line86="" line87="    protected drawPartial(image: Image, x: number, y: number, " line88="     index: number, width: number = 0, height: number = 0) {" line89="        const xf = (index % 3) * this.unit;" line90="        const yf = Math.idiv(index, 3) * this.unit;" line91="" line92="" line93="        for (let e = 0; e &lt; width; e++) {" line94="            for (let t = 0; t &lt; height; t++) {" line95="                image.setPixel(" line96="                    x + e," line97="                    y + t," line98="                    this.frame.getPixel(xf + e, yf + t));" line99="            }" line100="        }" line101="    }" line102="" line103="    protected drawCursorRow() {" line104="        let offset = 0;" line105="        if (this.cursorCount &gt; 40) {" line106="            offset = 1;" line107="        }" line108="" line109="        this.cursorCount = (this.cursorCount + 1) % 80;" line110="" line111="        this.image.drawTransparentImage(" line112="            this.cursor," line113="            this.innerLeft + this.textAreaWidth() + this.unit + offset - this.cursor.width," line114="            this.innerTop + this.unit + this.textAreaHeight() + 1 - this.cursorRowHeight()" line115="        )" line116="    }" line117="" line118="    //" line119="    protected cursorRowHeight() {" line120="        return this.cursor.height + 1;" line121="    }" line122="" line123="    protected rowHeight() {" line124="        return this.font.charHeight + 1;" line125="    }" line126="" line127="    protected textAreaWidth() {" line128="        return this.image.width - ((this.innerLeft + Math.min(this.unit, 12)) &lt;&lt; 1) - 2;" line129="        //return(this.image.width - (this.unit * 4));" line130="    }" line131="" line132="    protected textAreaHeight() {" line133="        return this.image.height - ((this.innerTop + Math.min(this.unit, 12)) &lt;&lt; 1) - 1;" line134="    }" line135="}" numlines="136"></mutation><next><block type="typescript_statement" id="ntaYt3UGOyqr6j6PA.b+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Dialog extends NineSliceBox {" line1="    chunks: string[][];" line2="    chunkIndex: number;" line3="" line4="    constructor(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, cursor?: Image) {" line5="        super(x, y, width, height, frame, font, 15, cursor);" line6="" line7="        this.chunkIndex = 0;" line8="    }" line9="" line10="    update() {" line11="        this.drawTextCore();" line12="        this.drawCursorRow();" line13="    }" line14="" line15="    hasNext() {" line16="        if (!this.chunks || this.chunks.length === 0) return false;" line17="        return this.chunkIndex &lt; this.chunks.length - 1;" line18="    }" line19="" line20="    hasPrev() {" line21="        if (!this.chunks || this.chunks.length === 0) return false;" line22="        return this.chunkIndex &gt; 0;" line23="    }" line24="" line25="    nextPage() {" line26="        if (this.hasNext()) {" line27="            this.chunkIndex++;" line28="        }" line29="    }" line30="" line31="    prevPage() {" line32="        if (this.hasPrev()) {" line33="            this.chunkIndex--;" line34="        }" line35="    }" line36="" line37="    chunkText(str: string): string[][] {" line38="        const charactersPerRow = Math.floor(this.textAreaWidth() / this.font.charWidth);" line39="        const charactersPerCursorRow = Math.floor(charactersPerRow - (this.cursor.width / this.font.charWidth));" line40="        const rowsOfCharacters = Math.floor(this.textAreaHeight() / this.rowHeight());" line41="        const rowsWithCursor = Math.ceil(this.cursor.height / this.rowHeight());" line42="" line43="        let lineLengths: number[] = [];" line44="" line45="        for (let j = 0; j &lt; rowsOfCharacters - rowsWithCursor; j++) lineLengths.push(charactersPerRow);" line46="        for (let k = 0; k &lt; rowsWithCursor; k++) lineLengths.push(charactersPerCursorRow);" line47="" line48="        return this.breakIntoPages(str, lineLengths);" line49="    }" line50="" line51="    setText(rawString: string) {" line52="        this.setFont(image.getFontForText(rawString));" line53="        this.chunks = this.chunkText(rawString);" line54="        this.chunkIndex = 0;" line55="    }" line56="" line57="    drawTextCore() {" line58="        if (!this.chunks || this.chunks.length === 0) return;" line59="        const lines = this.chunks[this.chunkIndex];" line60="        const availableWidth = this.textAreaWidth();" line61="        const availableHeight = this.textAreaHeight();" line62="" line63="        const charactersPerRow2 = Math.floor(availableWidth / this.font.charWidth);" line64="        const rowsOfCharacters2 = Math.floor(availableHeight / this.rowHeight());" line65="" line66="        if (this.unit &gt; MAX_FRAME_UNIT) this.draw();" line67="" line68="        const textLeft = 1 + this.innerLeft + Math.min(this.unit, MAX_FRAME_UNIT) + ((availableWidth - charactersPerRow2 * this.font.charWidth) &gt;&gt; 1);" line69="        const textTop = 1 + (this.image.height &gt;&gt; 1) - ((lines.length * this.rowHeight()) &gt;&gt; 1);" line70="" line71="        for (let row = 0; row &lt; lines.length; row++) {" line72="            this.image.print(" line73="                lines[row]," line74="                textLeft," line75="                textTop + row * this.rowHeight()," line76="                this.textColor, this.font" line77="            )" line78="        }" line79="    }" line80="" line81="    protected setFont(font: image.Font) {" line82="        this.font = font;" line83="    }" line84="" line85="    breakIntoPages(text: string, lineLengths: number[]): string[][] {" line86="        const result: string[][] = [];" line87="" line88="        let currentPage: string[] = [];" line89="" line90="        let lastBreakLocation = 0;" line91="        let lastBreak = 0;" line92="        let line = 0;" line93="        let lineLength = lineLengths[line];" line94="" line95="        function nextLine() {" line96="            line++;" line97="            lineLength = lineLengths[line];" line98="        }" line99="" line100="        for (let index = 0; index &lt; text.length; index++) {" line101="            if (text.charAt(index) === &quot;\n&quot;) {" line102="                currentPage.push(this.formatLine(text.substr(lastBreak, index - lastBreak)));" line103="                index++;" line104="                lastBreak = index;" line105="                nextLine();" line106="            }" line107="            // Handle \\n in addition to \n because that's how it gets converted from blocks" line108="            else if (text.charAt(index) === &quot;\\&quot; &amp;&amp; text.charAt(index + 1) === &quot;n&quot;) {" line109="                currentPage.push(this.formatLine(text.substr(lastBreak, index - lastBreak)));" line110="                index += 2;" line111="                lastBreak = index" line112="                nextLine();" line113="            }" line114="            else if (this.isBreakCharacter(text.charCodeAt(index))) {" line115="                lastBreakLocation = index;" line116="            }" line117="" line118="            if (index - lastBreak === lineLength) {" line119="                if (lastBreakLocation === index || lastBreakLocation &lt; lastBreak) {" line120="                    currentPage.push(this.formatLine(text.substr(lastBreak, lineLength)));" line121="                    lastBreak = index;" line122="                    nextLine();" line123="                }" line124="                else {" line125="                    currentPage.push(this.formatLine(text.substr(lastBreak, lastBreakLocation - lastBreak)));" line126="                    lastBreak = lastBreakLocation;" line127="                    nextLine();" line128="                }" line129="            }" line130="" line131="            if (line &gt;= lineLengths.length) {" line132="                line = 0;" line133="                lineLength = lineLengths[line];" line134="                result.push(currentPage);" line135="                currentPage = [];" line136="            }" line137="        }" line138="" line139="         currentPage.push(this.formatLine(text.substr(lastBreak, text.length - lastBreak)));" line140="" line141="        if (currentPage.length &gt; 1 || currentPage[0] !== &quot;&quot;) {" line142="            result.push(currentPage);" line143="        }" line144="" line145="        return result;" line146="    }" line147="" line148="    formatLine(text: string) {" line149="        let l = 0;" line150="        while (text.charAt(l) === &quot; &quot;) l++;" line151="        return text.substr(l, text.length);" line152="    }" line153="" line154="    isBreakCharacter(charCode: number) {" line155="        return charCode &lt;= 32 ||" line156="            (charCode &gt;= 58 &amp;&amp; charCode &lt;= 64) ||" line157="            (charCode &gt;= 91 &amp;&amp; charCode &lt;= 96) ||" line158="            (charCode &gt;= 123 &amp;&amp; charCode &lt;= 126) ||" line159="            (charCode &gt;= 19968 &amp;&amp; charCode &lt;= 40869) ||" line160="            charCode == 12290 ||" line161="            charCode == 65292;" line162="    }" line163="}" numlines="164"></mutation><next><block type="typescript_statement" id="wPE*F3fE?HoiXc@q6;4]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class DialogBox extends NineSliceBox {" line1="    print: string[];" line2="    text: string;" line3="" line4="    constructor(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, cursor?: Image) {" line5="        super(x, y, width, height, frame, font, 15, cursor);" line6="        this.text = &quot;Hello World Hello World Hello World&quot;;" line7="        this.print = [&quot;&quot;];" line8="        this.preparePrint();" line9="    }" line10="" line11="    update() {" line12="        this.drawTextCore();" line13="        //this.drawCursorRow();" line14="    }" line15="" line16="    setText(rawString: string) {" line17="        this.font = image.getFontForText(rawString);" line18="        this.text = rawString;" line19="    }" line20="" line21="    drawTextCore() {" line22="        for (let m = 0; m &lt; this.print.length; m++) {" line23="            this.image.print(this.print[m], 10, 10 * m, 15, this.font);" line24="        }" line25="    }" line26="" line27="    preparePrint() {" line28="        const maxWidth = this.image.width - (this.unit * 2);" line29="        const maxHeight = this.image.height - (this.unit * 2);" line30="" line31="        const charPerRow = 10;" line32="        const maxRows = Math.floor(this.image.height / this.font.charHeight);" line33="" line34="        let row2 = 0;" line35="        let chunk = &quot;&quot;;" line36="        for (let n = 0; n &lt; this.text.length; n++) {" line37="            if (this.text[n] == &quot; &quot; &amp;&amp; chunk.length &gt; 0) {" line38="                if ((chunk + this.print[row2]).length &gt; charPerRow) {" line39="                    row2++;" line40="                    this.print[row2] = &quot;&quot;;" line41="                }" line42="                this.print[row2] += chunk + &quot; &quot;;" line43="                chunk = &quot;&quot;;" line44="                continue;" line45="            }" line46="            chunk += this.text[n];" line47="            if (this.print[row2].length &gt;= charPerRow) row2 += 1;" line48="        }" line49="        this.print[(((this.print[row2] + chunk).length &gt; charPerRow)?row2+1:row2)] += chunk;" line50="    }" line51="}" numlines="52"></mutation><next><block type="typescript_statement" id="WymN|5WIQ$R{,i|OJ^Q7" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let dialog = new DialogBox(0, 0, 100, 100, assets.image`myImage`);" numlines="1" declaredvars="dialog"></mutation><next><block type="typescript_statement" id="6^W-9[h#)[7xyt_epW7M" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let nineSlice = new NineSliceBox(0, 0, 100, 100, assets.image`myImage`);" numlines="1" declaredvars="nineSlice"></mutation><next><block type="variables_set" id="E-xQu1gM/Zsv/zp5~5p8"><field name="VAR" id="Ke$#zEOMOd8S=cl~r2u%">dem</field><comment pinned="false" h="80" w="160">dialog.frame = assets.image`myImage`;
dialog.update();</comment><data>0;1</data><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="h~J0=E9DkU$17P2T1L9u" inline="false"><mutation items="4" horizontalafter="3"></mutation><value name="ADD0"><shadow type="math_number" id="IZ!FacU3/8pg]as,!FN3"><field name="NUM">0</field></shadow></value><value name="ADD1"><shadow type="math_number" id="4D3XMMY7B2c!i;$gT.Pj"><field name="NUM">0</field></shadow></value><value name="ADD2"><shadow type="math_number" id="dB|81_OIjHtXKEL-MD@5"><field name="NUM">20</field></shadow></value><value name="ADD3"><shadow type="math_number" id="|`u~0@2O%d-{F_/Xw?^%"><field name="NUM">20</field></shadow></value></block></value><next><block type="variables_set" id="RZ!CfE2Xbp7i!4+wm;.0"><field name="VAR" id="?z]$^i2E-W.{|:@uAcOV">pressed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="q5A*].Wx[xn%u+_O{sOJ"><mutation items="2" horizontalafter="3"></mutation><value name="ADD0"><shadow type="math_number" id="0g=yqXTJ+Ut|+N${(L$Z"><field name="NUM">0</field></shadow></value><value name="ADD1"><shadow type="math_number" id="K3fOwGv@85M~3)Db1w1p"><field name="NUM">0</field></shadow></value></block></value><next><block type="typescript_statement" id="`72_f^=N;@N=6yM`Qg#4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="dialog.update();" numlines="1"></mutation><next><block type="typescript_statement" id=";VW-jWvE(q^L$}{I3T6h" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="scene.createRenderable(0, (target: Image, camera: scene.Camera) =&gt; {" line1="    pressed = [Math.sign(controller.dx()) * pressed[0], Math.sign(controller.dx()) * pressed[1]];" line2="    if (controller.A.isPressed()) {" line3="        dem[0] += Math.floor(controller.dx());" line4="        dem[1] += Math.floor(controller.dy());" line5="    } else {" line6="        dem[2] += Math.floor(controller.dx());" line7="        dem[3] += Math.floor(controller.dy());" line8="    }" line9="    //nineSlice.resize(dem[0], dem[1],assets.image`myImage`, undefined);" line10="    dialog.resize(dem[0], dem[1], dem[2], dem[3],assets.image`myImage2`);" line11="    dialog.update();" line12="    target.drawTransparentImage(dialog.image, 0, 0);" line13="    game.showLongText" line14="});" numlines="15"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>