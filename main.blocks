<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="S+jqfyqgcN,r:H5y*hf8">dem</variable><variable id="!QCoyU^me?I)v#T${M2j">pressed</variable></variables><comment id="Sn6_%~4/CX*f=[8J_23Y" data="0" x="0" y="0" h="360" w="480">scene.setBackgroundColor(8)
game.setDialogFrame(img`
..ccccc....333.....333...ccccc...
.c33b33c..39993...39993.c33b33c..
c3b33bb3c39999933399999c3bb33b3c.
c33b33b3c99111999991119c3b33b33c.
cb33b33bc91999199919991cb33b33bc.
c3b33bbbcb999991119999bcbbb33b3c.
c3bb3bbd1b111119991111b1dbb3bb3c.
.c33bbd1b11111111111111b1dbb33c..
..cccc1b1111111111111111b1cccc...
.3991bb111111111111111111bb993...
3991991111111111111111111191993..
39919911111111111111111111991993.
39919911111111111111111111991993.
.3991911111111111111111111991993.
..39919111111111111111111191993..
..3991911111111111111111191993...
..3991911111111111111111191993...
.39919111111111111111111191993...
3991991111111111111111111191993..
39919911111111111111111111991993.
39919911111111111111111111991993.
.3991911111111111111111111991993.
..699bb111111111111111111bb1993..
..cccc1b1111111111111111b1cccc...
.c33bbd1b11111111111111b1dbb33c..
c3bb3bbd1b111199911111b1dbb3bb3c.
c3b33bbbcb999911199999bcbbb33b3c.
cb33b33bc19991999199919cb33b33bc.
c33b33b3c91119999911199c3b33b33c.
c3b33bb3c99999333999993c3bb33b3c.
.c33b33c.39993...39993..c33b33c..
..ccccc...333.....333....ccccc...
.................................
`)
//game.showDialog("Hello", "Yes Sir?", "something");
game.showLongText("Hello", DialogLayout.Bottom)
//game.BaseDialog.resize();</comment><block type="pxt-on-start" id="$V(i0Sr-z;(G{E0,{X%v" x="10" y="10"><statement name="HANDLER"><block type="gamesetbackgroundcolor" id="l2`HCJh(eME494vH;,j0"><comment pinned="false" h="80" w="160">let test = sprites.create(assets.image`myImage`);
test.image.fillRect(0, 0, test.width / 3, test.height / 3, 0);
test.image.drawPartial()</comment><data>0</data><value name="color"><shadow type="colorindexpicker" id="w|ZM(ME]eB$.nP_D/xXb"><field name="index">0</field></shadow></value><next><block type="typescript_statement" id=".r$SV~|+P!S_6OWis:_-" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class NineSliceBox {" line1="    image: Image;" line2="    frame: Image;" line3="    cursor: Image;" line4="    nineSlice: Image[];" line5="    x: number;" line6="    y: number;" line7="    unit: number;" line8="    rows: number;" line9="    columns: number;" line10="    cursorCount: number;" line11="" line12="    constructor(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, cursor?: Image) {" line13="        this.cursorCount = 0;" line14="        this.resize(x, y, width, height, frame, font, cursor);" line15="    }" line16="" line17="    resize(x: number, y: number, width: number, height: number, frame?: Image, font?: image.Font, cursor?: Image) {" line18="        this.x = x; this.y = y;" line19="        this.frame = frame || assets.image`defaultFrame`;" line20="        this.unit = Math.floor(this.frame.width / 3);" line21="        this.columns = Math.floor(width / this.unit);" line22="        this.rows = Math.floor(height / this.unit);" line23="        this.image = image.create(this.x + width, this.y + height);" line24="        this.cursor = cursor || assets.image`cursor`;" line25="        this.calculateSlices();" line26="        this.draw();" line27="        //this.drawCursorRow();" line28="        console.log([this.image.width, this.image.height]);" line29="    }" line30="" line31="    calculateSlices() {" line32="        this.nineSlice = [];" line33="        for (let i = 0; i &lt; 9; i++) {" line34="            this.nineSlice.push(image.create(this.unit, this.unit))" line35="            this.drawPartial(this.nineSlice[i], 0, 0, i, this.unit, this.unit);" line36="        }" line37="    }" line38="" line39="    protected draw() {" line40="        let edgeX = this.image.width - this.unit;" line41="        let edgeY = this.image.height - this.unit;" line42="" line43="        for (let c = 2; c &lt; this.columns; c++) {" line44="            this.image.drawTransparentImage(this.nineSlice[1], this.x + ((c - 1) * this.unit), this.y);" line45="            this.image.drawTransparentImage(this.nineSlice[7], this.x + ((c - 1) * this.unit),  edgeY);" line46="        }" line47="        this.drawPartial(this.image, this.x + ((this.columns - 1) * this.unit)," line48="            this.y, 1, this.image.width - ((this.columns * this.unit) + this.x), this.unit);" line49="        this.drawPartial(this.image, this.x + ((this.columns - 1) * this.unit)," line50="            edgeY, 7, this.image.width - ((this.columns * this.unit) + this.x), this.unit);" line51="" line52="        for (let r = 2; r &lt; this.rows; r++) {" line53="            this.image.drawTransparentImage(this.nineSlice[3], this.x, this.y + ((r - 1) * this.unit));" line54="            this.image.drawTransparentImage(this.nineSlice[5], edgeX, this.y + ((r - 1) * this.unit));" line55="        }" line56="        this.drawPartial(this.image, this.x, this.y + ((this.rows - 1) * this.unit)," line57="            3, this.unit, this.image.height - ((this.rows * this.unit) + this.y));" line58="        this.drawPartial(this.image, edgeX, this.y + ((this.rows - 1) * this.unit)," line59="            5, this.unit, this.image.height - ((this.rows * this.unit) + this.y));" line60="" line61="        //Edges" line62="        this.image.drawTransparentImage(this.nineSlice[0], this.x, this.y);" line63="        this.image.drawTransparentImage(this.nineSlice[2], edgeX, this.y);" line64="        this.image.drawTransparentImage(this.nineSlice[6], this.x, edgeY);" line65="        this.image.drawTransparentImage(this.nineSlice[8], edgeX, edgeY);" line66="        " line67="        this.image.fillRect(" line68="            this.unit + this.x, this.unit + this.y, edgeX - this.x -this.unit, edgeY - this.y - this.unit," line69="            this.frame.getPixel(this.unit, this.unit));" line70="    }" line71="" line72="    protected drawPartial(image: Image, x: number, y: number, " line73="     index: number, width: number = 0, height: number = 0) {" line74="        const xf = (index % 3) * this.unit;" line75="        const yf = Math.idiv(index, 3) * this.unit;" line76="" line77="" line78="        for (let e = 0; e &lt; width; e++) {" line79="            for (let t = 0; t &lt; height; t++) {" line80="                image.setPixel(" line81="                    x + e," line82="                    y + t," line83="                    this.frame.getPixel(xf + e, yf + t));" line84="            }" line85="        }" line86="    }" line87="" line88="    drawCursorRow() {" line89="        let offset = 0;" line90="        if (this.cursorCount &gt; 40) {" line91="            offset = 1;" line92="        }" line93="" line94="        this.cursorCount = (this.cursorCount + 1) % 80;" line95="" line96="        this.image.drawTransparentImage(" line97="            this.cursor," line98="            offset + this.image.width - (this.unit * 1.5)," line99="            this.image.height - (this.unit * 1.5)" line100="        )" line101="    }" line102="}" numlines="103"></mutation><next><block type="typescript_statement" id="Gfmyg6z7XNN8Jzpbo(j+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let dialog = new game.BaseDialog(50, 50);" numlines="1" declaredvars="dialog"></mutation><next><block type="typescript_statement" id="f]o[f3O+nFv(G.?^-V*|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let nineSlice = new NineSliceBox(0, 0, 100, 100, assets.image`myImage`);" numlines="1" declaredvars="nineSlice"></mutation><next><block type="typescript_statement" id="cXYUGe77BOZHH(^@bid!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let dialogs = new game.BaseDialog(screen.width, screen.height);" numlines="1" declaredvars="dialogs"></mutation><next><block type="typescript_statement" id=")QVv0%A(aVN7A@z0PnzD" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="dialog.frame = assets.image`myImage`;" numlines="1"></mutation><next><block type="typescript_statement" id="_m}y$22@Y:Dr[#dvb+Oo" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="dialog.update();" numlines="1"></mutation><next><block type="variables_set" id="V:d.W?(^la6IR6?iC;%x"><field name="VAR" id="S+jqfyqgcN,r:H5y*hf8">dem</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="!hsi@de}m*1UFq_w_rkz" inline="false"><mutation items="4" horizontalafter="3"></mutation><value name="ADD0"><shadow type="math_number" id="wOgMfRor$^x;XA073!=+"><field name="NUM">0</field></shadow></value><value name="ADD1"><shadow type="math_number" id="/h7Le?Kmn+HW@1[hJ4ib"><field name="NUM">0</field></shadow></value><value name="ADD2"><shadow type="math_number" id="1)ro)X^NKQjI?]Yo,aSu"><field name="NUM">20</field></shadow></value><value name="ADD3"><shadow type="math_number" id="wFW4=g/PS8uTw[WD9{gW"><field name="NUM">20</field></shadow></value></block></value><next><block type="variables_set" id=".clNKWQ|6z:m!c$UY5jd"><field name="VAR" id="!QCoyU^me?I)v#T${M2j">pressed</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="1BGtLT:B75T-8i4nCv71"><mutation items="2" horizontalafter="3"></mutation><value name="ADD0"><shadow type="math_number" id="J4U!nos8jRQu`+[?V%9."><field name="NUM">0</field></shadow></value><value name="ADD1"><shadow type="math_number" id="-*@yK!Txq]ZK.K!fDD%f"><field name="NUM">0</field></shadow></value></block></value><next><block type="typescript_statement" id="E`:~fHxcOOcvX[WTPGf]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="scene.createRenderable(0, (target: Image, camera: scene.Camera) =&gt; {" line1="    pressed = [Math.sign(controller.dx()) * pressed[0], Math.sign(controller.dx()) * pressed[1]];" line2="    if (controller.A.isPressed()) {" line3="        dem[0] += Math.floor(controller.dx());" line4="        dem[1] += Math.floor(controller.dy());" line5="    } else {" line6="        dem[2] += Math.floor(controller.dx());" line7="        dem[3] += Math.floor(controller.dy());" line8="    }" line9="    //nineSlice.resize(dem[0], dem[1], assets.image`myImage`, undefined);" line10="    nineSlice.resize(dem[0], dem[1], dem[2], dem[3], assets.image`myImage1`);" line11="    target.drawTransparentImage(nineSlice.image, 0, 0);" line12="    game.showLongText" line13="});" numlines="14"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>